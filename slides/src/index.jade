doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Electron.js - WebIsArt workshop

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        img(src="./images/LogoWebIsArt.png" style="width: 180px; height: auto; margin-bottom: 20px;")
        h1 Electron.js
        h3 desktop app development
        h4 by <a href="https://twitter.com/delvedor" target="_blank">Tomas Della Vedova</a>

      section
        h2.bullet What we will see today
        ul
          li Introduction to Electron
          li Electron Architecture
          li Electron's APIs
          li <em>My experience</em>
          li Coding session

      section(data-bespoke-hash="what-is-electron")
        img(src="./images/electron.svg" style="width: 400px; height: auto; margin-bottom: 30px;").bullet
        ul
          li Build cross platform desktop apps with web technologies
          li Formerly known as Atom Shell
          li Made by GitHub
          li <a href="http://electron.atom.io/" target="_blank">electron.atom.io</a><br/><a href="https://github.com/electron/electron" target="_blank">github.com/electron</a>

      section(data-bespoke-hash="history")
        h2.bullet History
        ul
          li Started in January 2013
          li Built initially for the Atom text editor
          li Renamed from Atom-shell to Electron

      section(data-bespoke-hash="alternatives")
        h2 Alternatives
        p.bullet Electron is not the only solution to build awesome desktop apps with web technologies.
        ul
          li <a href="https://github.com/nwjs/nw.js" target="_blank">NW.js</a>
          li <a href="https://github.com/adobe/brackets-shell" target="_blank">brackets-shell</a>
          li <a href="https://www.trueinteractions.com/" target="_blank">Tint</a>

      section
        h2.bullet Electron vs NWjs
        ul
          li Entry of Application
          li Build System
          li Node Integration
          li Multi-context
          li.small-text <em>Check <a href="https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md" target="_blank">here</a></em>

      section(data-bespoke-hash="architecture")
        h2 How works Electron.js
        h2 under the hood?

      section
        img(src="./images/architecture.png" style="width: 600px; height: auto;")

      section(data-bespoke-hash="process")
        img(src="./images/electronProcess.png" style="width: 400px; height: auto;").border-radius

      section(data-bespoke-hash="docs")
        h2.bullet Electron holy bible
        ul
          li <a href="https://github.com/electron/electron/tree/master/docs" target="_blank">Old Covenant - Docs</a>
          li <a href="https://github.com/electron/electron/issues" target="_blank">New Covenant - Issues</a>

      section(data-bespoke-hash="api")
        h3.bullet APIs
        ul
          li <img src="./images/api.png" alt="api" style="width: 370px; height: auto; margin-top: -25px" class="border-radius" />

      section
        h3.bullet APIs
        ul
          li app
          li BrowserWindow
          li ipc Main/Renderer
          li webContents
          li Menu

      section(data-bespoke-hash="app")
        h2 App
        pre
          code.language-javascript.
            // import the app module from electron
            const { app } = require('electron')
            // When application is ready
            app.on('ready', createWindow)
            // when all the windows of the app are closed
            app.on('window-all-closed', closeApp)

      section(data-bespoke-hash="browser-window")
        h2 Browser Window
        pre
          code.language-javascript.
            // import the BrowserWindow module from electron
            const { BrowserWindow } = require('electron')
            // create a new window
            let window = new BrowserWindow(options)
            // load an html file
            window.loadURL(path/to/html)
            // show chrome dev tools
            window.webContents.openDevTools()
            // window closed callback
            window.on('closed', windowClosed)

      section
        p.bullet Browser Window options?
        ul
          li <img src="./images/browser-options.png" alt="browser options" style="width: 340px; height: auto; margin-top:-5px;" class="border-radius" />

      section(data-bespoke-hash="ipc")
        h2 ipc
        p Inter-process communication
        p Is a tool that make possible communicate between renderer and main process.
          Is divided in two modules, <strong>ipcMain</strong> and <strong>ipcRenderer</strong>
        p Both ipcMain and ipcRenderer are instances if EventEmitter class.

      section
        h2 ipcMain
        pre
          code.language-javascript.
            const { ipcMain: ipc } = require('electron')

            ipc.on('async', (event, arg) => {
              console.log(arg) // prints "ping"
              event.sender.send('async', 'pong')
            })

            ipc.on('sync', (event, arg) => {
              console.log(arg)  // prints "ping"
              event.returnValue = 'pong'
            })

      section
        h2 ipcRenderer
        pre
          code.language-javascript.
            const { ipcRenderer: ipc } = require('electron')

            let msg = ipc.sendSync('sync', 'ping')
            console.log(msg) // prints "pong"

            ipc.send('async', 'ping')

            ipc.on('async', (event, arg) => {
              console.log(arg) // prints "pong"
            })

      section
        h2 webContents
        pre
          code.language-javascript.
            // window is the BrowserWindow object
            // webContents is a property of the window object
            window.webContents.send('async', 'pong')

            window.webContents.sendInputEvent({
              type: 'keyDown',
              keyCode: 'Left'
            })

      section(data-bespoke-hash="menu")
        h2 Menu
        pre
          code.language-javascript.
            // import Menu and Menu Item class
            const { Menu, MenuItem } = require('electron')
            // create a new instance of the menu
            const menu = new Menu()
            // add menu items
            menu.append(new MenuItem(options))
            menu.append(new MenuItem(options))
            menu.append(new MenuItem(options))

      section(data-bespoke-hash="my-experience")
        h2.bullet My experience
        ul
          li Cross platform is <strong>goodness</strong>
          li Cross platform is <strong>hell</strong>

      section
        h3 My experience
        p More we go deeper with the interaction between Electron and the OS, more we gain problems.
        img(src="./images/itsworking.gif" style="width: 400px; height: auto; margin-top: 20px").border-radius

      section
        h3 My experience
        p Modularize everything and create internal, OS agnostic, APIs
        pre.small-text.bullet
          code.language-javascript.
            // returns the path of the configuration folder
            function confFolder () {
              return process.platform === 'win32' ? 'win\path' : 'mac/path'
            }

      section
        h3 My experience
        p By convention Windows saves the configuration file inside the executable folder, while Mac and Linux have to create a hidden folder in the user's home.
        pre
          code.language-javascript.
            let fconf = path.join(confFolder(), 'config.json')
            const conf = require(fconf)

      section
        h3 Talking about APIs
        ul
          li You can build <strong>isomorphic</strong> APIs by using <em>Remote</em> API.
          li You can take advantage of <a href="https://github.com/delvedor/is-electron" target="_blank">is-electron</a> module.
          li
            pre.small-text
              code.language-javascript.
                const e = require('electron')
                const is = require('is-electron')
                function closeApp () {
                  if (is.main()) { // main process
                    e.app.quit()
                  } else { // renderer process
                    e.remote.app.quit()
                  }
                }
                is.main() ? exports.closeApp = closeApp :
                            window.closeApp = closeApp

      section
        h3 My experience
        p Some native third-party modules are compatible with a single OS
        img(src="./images/singleos.gif" style="width: 300px; height: auto; margin-top: 20px").border-radius

      section
        h3 My experience
        p You will write tons of quickfix
        img(src="./images/quickfix.gif" style="width: 350px; height: auto; margin-bottom: 30px").border-radius.bullet
        ul
          li Code refactor will be your best friend

      section
        h3 My experience
        ul
          li If you design pixel calculated windows pay attention, because Mac creates a window of a specific dimension plus the header.
          li <strong>Windows will not.</strong>

      section
        h3 My experience
        p Create a Windows installer is damn hard.
        img(src="./images/winInstaller.gif" style="width: 250px; height: auto; margin-top: 20px").border-radius

      // section
      //   h3 My experience
      //   p Work with screen API under Windows is a <span style="color: #B71C1C"><strong>bloody mess</strong></span>.
      //   img(src="./images/screen.gif" style="width: 350px; height: auto; margin-bottom: 20px").border-radius.bullet
      //   ul
      //     li If you really need to work with screen under Windows<br/>you can use <a href="https://github.com/delvedor/electron-screen" target="_blank">electron-screen</a> module
      //     li <strong>Interact with Windows in general, is a mess.</strong>

      section
        h3 My experience
        p <strong>Interact with Windows in general, is a mess.</strong>
        img(src="./images/screen.gif" style="width: 350px; height: auto; margin-bottom: 20px").border-radius.bullet

      section
        h2.bullet The beauty of Electron
        ul
          li Very active community
          li Fast development cycle
          li You can build whatever you want!

      section(data-bespoke-hash="built-with")
        h2.bullet Built with Electron
        ul
          li Atom Editor
          li Slack
          li Microsoft VS Code
          li Nuclide
          li Strem.io
          li Wordpress.com
          li Postman
          li Google Play Music
          li Ionic Lab
          li Brave Browser
          li Rocket.chat
          li <strong>This Presentation ;)</strong>

      section
        h4 How works this presentation
        img(src="./images/how-slides.png" style="width: 600px; height: auto; margin-top: 10px;").border-radius

      section
        h2 Let's code!
        pre.left-align
          code.small-text
            $ git clone https://github.com/delvedor/electron-workshop.git
            $ cd electron-workshop
            $ npm install
            $ npm start

      section(data-bespoke-hash="useful-links")
        h2 Useful links
        p <a href="https://github.com/sindresorhus/awesome-electron" target="_blank">Awesome Electron</a>
        p <a href="https://github.com/electron-userland" target="_blank">Electron userland</a>

      section
        img(src="./images/LogoWebIsArt.png" style="width: 180px; height: auto; margin-bottom: 20px;")
        h1 Thanks!
        p @delvedor on <a href="https://twitter.com/delvedor" target="_blank">Twitter</a> and <a href="https://github.com/delvedor" target="_blank">GitHub</a>
        p <a href="https://www.facebook.com/webisart.user.group/" target="_blank">facebook.com/webisart.user.group</a>

        script(src='build/build.js')
